#!/usr/sbin/nft -f

# Flush existing rules
flush ruleset

{%- macro build_nft_rule(rule) %}
{%- set rule_parts = [] -%}
{# Interface conditions #}
{%- if rule.in_interface is defined -%}
{%- set _ = rule_parts.append('iifname "' + rule.in_interface + '"') -%}
{%- endif -%}
{%- if rule.out_interface is defined -%}
{%- set _ = rule_parts.append('oifname "' + rule.out_interface + '"') -%}
{%- endif -%}
{# IP address conditions #}
{%- if rule.source is defined -%}
{%- set _ = rule_parts.append('ip saddr ' + rule.source|string) -%}
{%- endif -%}
{%- if rule.destination is defined -%}
{%- set _ = rule_parts.append('ip daddr ' + rule.destination|string) -%}
{%- endif -%}
{# Protocol conditions #}
{%- if rule.protocol is defined -%}
{%- if rule.protocol == '112' or rule.protocol == 112 -%}
{%- set _ = rule_parts.append('ip protocol 112') -%}
{%- elif rule.protocol == 'icmp' -%}
{%- set _ = rule_parts.append('ip protocol icmp') -%}
{%- elif rule.destination_port is defined -%}
{%- set _ = rule_parts.append(rule.protocol|string + ' dport ' + rule.destination_port|string) -%}
{%- elif rule.source_port is defined -%}
{%- set _ = rule_parts.append(rule.protocol|string + ' sport ' + rule.source_port|string) -%}
{%- else -%}
{%- set _ = rule_parts.append('ip protocol ' + rule.protocol|string) -%}
{%- endif -%}
{%- endif -%}
{# Connection tracking #}
{%- if rule.ctstate is defined -%}
{%- set _ = rule_parts.append('ct state ' + rule.ctstate.replace(',', ', ').lower()) -%}
{%- endif -%}
{# Build final rule based on action #}
{% if rule.jump == 'DROP' %}
        {{ rule_parts | join(' ') }} drop{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% elif rule.jump == 'ACCEPT' %}
        {{ rule_parts | join(' ') }} accept{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% elif rule.jump == 'LOG' %}
        {{ rule_parts | join(' ') }} log{% if rule.log_prefix is defined %} prefix "{{ rule.log_prefix }}"{% endif %}{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% elif rule.jump == 'DNAT' %}
        {{ rule_parts | join(' ') }} dnat to {{ rule.to_destination }}{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% elif rule.jump == 'SNAT' %}
        {{ rule_parts | join(' ') }} snat to {{ rule.to_source }}{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% else %}
        {{ rule_parts | join(' ') }} {{ rule.jump.lower() }}{% if rule.comment is defined %} comment "{{ rule.comment }}"{% endif %};
{% endif %}
{%- endmacro %}

# Define the main table
table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;
{% for rule in iptables_rules %}
{% if rule.chain == 'INPUT' %}
{{ build_nft_rule(rule) }}
{% endif %}
{% endfor %}
    }

    chain forward {
        type filter hook forward priority 0; policy accept;
{% for rule in iptables_rules %}
{% if rule.chain == 'FORWARD' %}
{{ build_nft_rule(rule) }}
{% endif %}
{% endfor %}
    }

    chain output {
        type filter hook output priority 0; policy accept;
{% for rule in iptables_rules %}
{% if rule.chain == 'OUTPUT' %}
{{ build_nft_rule(rule) }}
{% endif %}
{% endfor %}
    }
}

# Define the NAT table
table inet nat {
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
{% for rule in iptables_rules %}
{% if rule.chain == 'PREROUTING' %}
{{ build_nft_rule(rule) }}
{% endif %}
{% endfor %}
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
{% for rule in iptables_rules %}
{% if rule.chain == 'POSTROUTING' %}
{{ build_nft_rule(rule) }}
{% endif %}
{% endfor %}
    }
} 